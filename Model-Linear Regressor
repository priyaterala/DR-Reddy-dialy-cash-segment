#uploading to colab

from google.colab import files
uploaded = files.upload()

# importing files

from __future__ import print_function
import math
from IPython import display
from matplotlib import cm
from matplotlib import gridspec
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
from sklearn import metrics
import tensorflow as tf
from tensorflow.python.data import Dataset
import io

tf.logging.set_verbosity(tf.logging.ERROR)

#display format

pd.options.display.max_rows = 10
pd.options.display.float_format = '{:.1f}'.format

#reading the uploaded csv file 

dr_df = pd.read_csv(io.StringIO(uploaded['drdataset 2018.csv'].decode('utf-8')))
dr_df = dr_df.reindex(np.random.permutation(dr_df.index))
dr_df
######################################################################
def preprocess_features(dr_df):
  """Prepares input features from drdataset 2018

  Args:
    dr_df: A Pandas DataFrame expected to contain data from drdataset 2018.
  Returns:
    A DataFrame that contains the features to be used for the model
  """
  selected_features = dr_df[
    ["Date",
     "Monthly_Close",
     "Weekly_Close",
     ]]
  processed_features = selected_features.copy()
  return processed_features

def preprocess_targets(dr_df):
  """Prepares target features (i.e., labels) from drdataset 2018.

  Args:
    dr_df: A Pandas DataFrame expected to contain data from the drdataset 2018.
  Returns:
    A DataFrame that contains the target feature.
  """
  output_targets = pd.DataFrame()
  # Scale the target to be in units of thousands of dollars.
  output_targets["Daily_Close"] = dr_df["Daily_Close"]
  return output_targets
##############################################################################
# Choose the first 90 (out of 114) examples for training.
training_examples = preprocess_features(dr_df.head(90))
training_targets = preprocess_targets(dr_df.head(90))

# Choose the last 24 (out of 114) examples for validation.
validation_examples = preprocess_features(dr_df.tail(24))
validation_targets = preprocess_targets(dr_df.tail(24))

# Double-check that we've done the right thing.
print("Training examples summary:")
display.display(training_examples.describe())
print("Validation examples summary:")
display.display(validation_examples.describe())

print("Training targets summary:")
display.display(training_targets.describe())
print("Validation targets summary:")
display.display(validation_targets.describe())
########################################################################
def construct_feature_columns(input_features):
  """Construct the TensorFlow Feature Columns.

  Args:
    input_features: The names of the numerical input features to use.
  Returns:
    A set of feature columns
  """
  return set([tf.feature_column.numeric_column(my_feature)
              for my_feature in input_features])
 ##########################################################################
 def my_input_fn(features, targets, batch_size=1, shuffle=True, num_epochs=None):
    """Trains a linear regression model.
    Args:
      features: pandas DataFrame of features
      targets: pandas DataFrame of targets
      batch_size: Size of batches to be passed to the model
      shuffle: True or False. Whether to shuffle the data.
      num_epochs: Number of epochs for which data should be repeated. None = repeat indefinitely
    Returns:
      Tuple of (features, labels) for next data batch
    """
    
    # Convert pandas data into a dict of np arrays.
    features = {key:np.array(value) for key,value in dict(features).items()}                                           
 
    # Construct a dataset, and configure batching/repeating.
    ds = Dataset.from_tensor_slices((features,targets)) # warning: 2GB limit
    ds = ds.batch(batch_size).repeat(num_epochs)
    
    # Shuffle the data, if specified.
    if shuffle:
      ds = ds.shuffle(10000)
    
    # Return the next batch of data.
    features, labels = ds.make_one_shot_iterator().get_next()
    return features, labels
 ##################################################################
 def train_model(
    learning_rate,
    steps,
    batch_size,
    feature_columns,
    training_examples,
    training_targets,
    validation_examples,
    validation_targets):
  """Trains a linear regression model of multiple features.
  
  In addition to training, this function also prints training progress information,
  as well as a plot of the training and validation loss over time.
  
  Args:
    learning_rate: A `float`, the learning rate.
    steps: A non-zero `int`, the total number of training steps. A training step
      consists of a forward and backward pass using a single batch.
    feature_columns: A `set` specifying the input feature columns to use.
    training_examples: A `DataFrame` containing one or more columns from
      `drdataset 2018` to use as input features for training.
    training_targets: A `DataFrame` containing exactly one column from
      `drdataset 2018` to use as target for training.
    validation_examples: A `DataFrame` containing one or more columns from
      `drdataset 2018` to use as input features for validation.
    validation_targets: A `DataFrame` containing exactly one column from
      `drdataset 2018` to use as target for validation.
      
  Returns:
    A `LinearRegressor` object trained on the training data.
  """

  periods = 10
  steps_per_period = steps / periods

  # Create a linear regressor object.
  my_optimizer = tf.train.FtrlOptimizer(learning_rate=learning_rate)
  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)
  linear_regressor = tf.estimator.LinearRegressor(
      feature_columns=construct_feature_columns(training_examples),
      optimizer=my_optimizer
  )
  
  training_input_fn = lambda: my_input_fn(training_examples, 
                                          training_targets["Daily_Close"], 
                                          batch_size=batch_size)
  predict_training_input_fn = lambda: my_input_fn(training_examples, 
                                                  training_targets["Daily_Close"], 
                                                  num_epochs=1, 
                                                  shuffle=False)
  predict_validation_input_fn = lambda: my_input_fn(validation_examples, 
                                                    validation_targets["Daily_Close"], 
                                                    num_epochs=1, 
                                                    shuffle=False)

  # Train the model, but do so inside a loop so that we can periodically assess
  # loss metrics.
  print("Training model...")
  print("RMSE (on training data):")
  training_rmse = []
  validation_rmse = []
  for period in range (0, periods):
    # Train the model, starting from the prior state.
    linear_regressor.train(
        input_fn=training_input_fn,
        steps=steps_per_period
    )
    # Take a break and compute predictions.
    training_predictions = linear_regressor.predict(input_fn=predict_training_input_fn)
    training_predictions = np.array([item['predictions'][0] for item in training_predictions])
    validation_predictions = linear_regressor.predict(input_fn=predict_validation_input_fn)
    validation_predictions = np.array([item['predictions'][0] for item in validation_predictions])
    
    # Compute training and validation loss.
    training_root_mean_squared_error = math.sqrt(
        metrics.mean_squared_error(training_predictions, training_targets))
    validation_root_mean_squared_error = math.sqrt(
        metrics.mean_squared_error(validation_predictions, validation_targets))
    # Occasionally print the current loss.
    print("  period %02d : %0.2f" % (period, training_root_mean_squared_error))
    # Add the loss metrics from this period to our list.
    training_rmse.append(training_root_mean_squared_error)
    validation_rmse.append(validation_root_mean_squared_error)
  print("Model training finished.")
 ########################################################################
#we can try different hyperparameter settings,to get the best validation performance.
_ = train_model(
    learning_rate=0.0002,
    steps=500,
    batch_size=100,
    feature_columns=construct_feature_columns(training_examples),
    training_examples=training_examples,
    training_targets=training_targets,
    validation_examples=validation_examples,
    validation_targets=validation_targets)
#########################################################################
Output:
Training model...
RMSE (on training data):
  period 00 : 2058.20
  period 01 : 2002.96
  period 02 : 1960.49
  period 03 : 1924.66
  period 04 : 1893.09
  period 05 : 1864.54
  period 06 : 1838.29
  period 07 : 1813.85
  period 08 : 1790.89
  period 09 : 1769.19
Model training finished.
##############################################################################
#Evaluation on Test Data
#the test data is in dr_test_dataset.csv file which we have uploaded at the 
#begining and read through read_csv() now and

test_df = pd.read_csv(io.StringIO(uploaded['dr_test_dataset.csv'].decode('utf-8')))

#process the data into features and labels by using the functions defined before
test_examples = preprocess_features(test_df)
test_targets = preprocess_targets(test_df)

predict_test_input_fn = lambda: my_input_fn(
      test_examples, 
      test_targets["Daily_Close"], 
      num_epochs=1, 
      shuffle=False)

#here we are predicting the test data using LinearRegressor predict() function
test_predictions = linear_regressor.predict(input_fn=predict_test_input_fn)
test_predictions = np.array([item['predictions'][0] for item in test_predictions])

#calculating error and printing
root_mean_squared_error = math.sqrt(
    metrics.mean_squared_error(test_predictions, test_targets))

print("Final RMSE (on test data): %0.2f" % root_mean_squared_error)
##################################################################################
Output:
Final RMSE (on test data): 2211.68
####################################################################################
